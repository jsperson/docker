#!/bin/bash

# Docker Container Run Script Generator and Launcher
# This script prompts for a container name and creates a custom run script

# Prompt for container name
echo "Enter container name (e.g., claude_myproject):"
read -r CONTAINER_NAME

if [ -z "$CONTAINER_NAME" ]; then
    echo "Error: Container name cannot be empty"
    exit 1
fi

# Generate the run script filename
RUN_SCRIPT="run-docker-${CONTAINER_NAME}.sh"

# Check if script already exists
if [ -f "$RUN_SCRIPT" ]; then
    echo "Run script '$RUN_SCRIPT' already exists."
    echo "Executing existing script..."
    bash "$RUN_SCRIPT"
    exit 0
fi

echo "Creating run script: $RUN_SCRIPT"

# Create the customized run script
cat > "$RUN_SCRIPT" <<EOF
#!/bin/bash

# Docker Container Run Script for $CONTAINER_NAME
# Auto-generated by run-docker-container-sample.sh

# Variables
CONTAINER_NAME="$CONTAINER_NAME"
IMAGE_NAME="ubuntu:latest"
USER_IN_CONTAINER="developer"
MOUNT_PATH_ON_HOST="\${HOME}"
MOUNT_PATH_IN_CONTAINER="/home/\${USER_IN_CONTAINER}/host"

# Ports to expose (space-separated list of port mappings)
# Format: "host_port:container_port" or just "port" for same on both sides
PORTS="3000 8000"

# Check if the container exists
CONTAINER_ID=\$(docker ps -a -q -f name=\$CONTAINER_NAME)

# If the container does not exist, create and run it
if [ -z "\$CONTAINER_ID" ]; then
    echo "Container does not exist. Creating and starting..."

    # Build port mappings
    PORT_ARGS=""
    for port in \$PORTS; do
        # If port doesn't contain ':', map it to itself (e.g., 8080 -> 8080:8080)
        if [[ "\$port" != *":"* ]]; then
            port="\$port:\$port"
        fi
        PORT_ARGS="\$PORT_ARGS -p \$port"
    done

    docker run -d \\
      --name \$CONTAINER_NAME \\
      -v \$MOUNT_PATH_ON_HOST:\$MOUNT_PATH_IN_CONTAINER \\
      \$PORT_ARGS \\
      \$IMAGE_NAME sleep infinity

    echo "Container created. Connecting as root to run setup..."
    echo "Run the setup script: bash \$MOUNT_PATH_IN_CONTAINER/source/docker/setup-docker-container.sh"
    echo ""

    # Connect as root for first-time setup
    docker exec -it \$CONTAINER_NAME /bin/bash
    exit 0
else
    # Check if the container is running
    RUNNING_CONTAINER_ID=\$(docker ps -q -f name=\$CONTAINER_NAME)
    if [ -z "\$RUNNING_CONTAINER_ID" ]; then
        echo "Container exists but is stopped. Starting..."
        docker start \$CONTAINER_NAME
    else
        echo "Container is already running."
    fi
fi

# Connect to the container as developer user
echo "Connecting to container as \$USER_IN_CONTAINER..."
docker exec -it --user \$USER_IN_CONTAINER -w /home/\$USER_IN_CONTAINER \$CONTAINER_NAME /bin/bash
EOF

# Make the generated script executable
chmod +x "$RUN_SCRIPT"
echo "Created $RUN_SCRIPT"
echo ""
echo "Executing $RUN_SCRIPT..."
bash "$RUN_SCRIPT"
